name: Build and Push Docker Image to GitHub Packages

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # GitHub Packages에 푸시할 수 있는 권한 부여

    steps:
      # 1. 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}


      # 4. GitHub Container Registry 로그인
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Docker 메타데이터 추출 (태그 및 레이블 자동 생성)
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile # repository 기준 도커파일 위치
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 7. EC2에 연결 후 새로운 컨테이너 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}                # EC2 주소
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}      # SSH Key
          port: 22                                     # SSH Port
          script: |
            # 1. 최신 Docker 이미지 Pull
            docker pull ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.tags }}

            # 2. 기존 컨테이너 중지 및 삭제
            docker stop glint_backend || true
            docker rm glint_backend || true

            # 3. 새로운 컨테이너 실행
            docker run -d --name glint_backend -p 8080:8080 ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.tags }}
            
            # 4. 사용하지 않는 이미지 삭제
            docker image prune -a -f



